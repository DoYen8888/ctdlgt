#include <bits/stdc++.h>
using namespace std;

int V, E, s, t;                  // Số đỉnh, số cạnh, đỉnh bắt đầu, đỉnh kết thúc
int parent[1005];               // Lưu đỉnh cha để truy đường
vector<int> adj[1005];          // Danh sách kề
bool visit[1005];               // Mảng đánh dấu đã thăm

// Thuật toán DFS tìm đường đi và ghi lại đường đi trong parent[]
void DFS(int u) {
    visit[u] = true;
    for (int v : adj[u]) {
        if (!visit[v]) {
            parent[v] = u;
            DFS(v);
        }
    }
}

// Truy vết và in đường đi từ s đến t
void path(int s, int t) {
    vector<int> road;
    while (t != -1) {           // Truy ngược từ t về s
        road.push_back(t);
        t = parent[t];
    }
    reverse(road.begin(), road.end()); // Đảo lại thành s → t

    if (road[0] != s)           // Nếu không thể truy ngược đến s
        cout << -1 << endl;
    else {
        for (int v : road)
            cout << v << " ";
        cout << endl;
    }
}

int main() {
    int T;
    cin >> T;                   // Nhập số lượng test case
    while (T--) {
        cin >> V >> E >> s >> t;

        // Khởi tạo lại cho mỗi test
        for (int i = 1; i <= V; i++) {
            adj[i].clear();
            visit[i] = false;
            parent[i] = -1;
        }

        // Nhập danh sách cạnh và tạo danh sách kề
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u); // Đồ thị vô hướng
        }

       

        DFS(s);       // Bắt đầu DFS từ đỉnh s
        path(s, t);   // Truy vết và in đường đi đến t
    }
}
