#include <bits/stdc++.h>
using namespace std;

struct Node {
    int val;
    Node *l, *r;
    Node(int x): val(x), l(0), r(0) {}
};

Node* build(const vector<int>& a) {
    if (a.empty() || a[0] == -1) return 0;
    queue<Node*> q;
    Node* root = new Node(a[0]);
    q.push(root);
    for (int i = 1; !q.empty() && i < a.size();) {
        Node* cur = q.front(); q.pop();
        if (a[i] != -1) q.push(cur->l = new Node(a[i]));
        i++;
        if (i < a.size() && a[i] != -1) q.push(cur->r = new Node(a[i]));
        i++;
    }
    return root;
}

int depth(Node* r) {
    return r ? 1 + max(depth(r->l), depth(r->r)) : 0;
}

int main() {
    int t, n; cin >> t;
    while (t--) {
        cin >> n;
        vector<int> a(n);
        for (int &x : a) cin >> x;
        cout << depth(build(a)) << '\n';
    }
}
