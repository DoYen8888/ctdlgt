#include <bits/stdc++.h>
using namespace std;

const int MAX = 1005;
int parent[MAX];

// Tìm gốc đại diện của đỉnh u
int find(int u) {
    return (parent[u] == u) ? u : parent[u] = find(parent[u]);
}

// Hợp nhất 2 đỉnh u và v vào cùng một tập, trả về false nếu tạo chu trình
bool unite(int u, int v) {
    int pu = find(u), pv = find(v);
    if (pu == pv) return false;
    parent[pu] = pv;
    return true;
}

int main() {
    int t; cin >> t;
    while (t--) {
        int n; cin >> n;
        vector<pair<int, int>> edges(n);

        for (int i = 0; i < n; ++i) {
            int u, v; cin >> u >> v;
            edges[i] = {u, v};
        }

        // Khởi tạo tập cha cho từng đỉnh
        for (int i = 1; i <= 1000; ++i) parent[i] = i;

        pair<int, int> cycle_edge;

        for (auto [u, v] : edges) {
            if (!unite(u, v)) {
                cycle_edge = {u, v};  // cạnh gây chu trình (ưu tiên cạnh cuối)
            }
        }

        cout << cycle_edge.first << " " << cycle_edge.second << endl;
    }
    return 0;
}
