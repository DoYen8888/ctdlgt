#include <bits/stdc++.h>
using namespace std;

int visit[1005];
vector<int> result;
vector<int> adj[1005];
int parent[1005];
int res = 0;
int V, E, s, t;

void BFS(int s) {
    queue<int> q;
    q.push(s);
    visit[s] = true;

    while (!q.empty()) {
        int u = q.front(); q.pop();
        result.push_back(u);
        for (int v : adj[u]) {
            if (!visit[v]) {
                visit[v] = true;
                parent[v] = u;
                q.push(v);
            }
        }
    }
}

void path(int s, int t) {
    vector<int> road;
    if (!visit[t]) {
        cout << "-1\n";
        return;
    }

    while (t != -1) {
        road.push_back(t);
        t = parent[t];
    }

    reverse(road.begin(), road.end());

    for (int x : road)
        cout << x << " ";
    cout << "\n";
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        cin >> V >> E >> s >> t;

        for (int i = 1; i <= V; i++) {
            adj[i].clear();
            visit[i] = false;
            parent[i] = -1;
        }
        result.clear();

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u); // đồ thị vô hướng
        }

        res = 0;
        BFS(s);
        path(s, t);
    }
    return 0;
}
