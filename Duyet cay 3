#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;

void levelOrderTraversal(int N, vector<tuple<int, int, char>>& edges) {
    unordered_map<int, pair<int, int>> tree;
    unordered_map<int, bool> isChild;
    for (auto& e : edges) {
        int u = get<0>(e), v = get<1>(e);
        if (get<2>(e) == 'L') tree[u].first = v;
        else tree[u].second = v;
        isChild[v] = true;
    }
    int root = -1;
    for (auto& e : edges) if (!isChild[get<0>(e)]) root = get<0>(e);
    
    queue<int> q; q.push(root);
    while (!q.empty()) {
        int node = q.front(); q.pop();
        cout << node << " ";
        if (tree[node].first) q.push(tree[node].first);
        if (tree[node].second) q.push(tree[node].second);
    }
    cout << endl;
}

int main() {
    int T, N; cin >> T;
    while (T--) {
        cin >> N;
        vector<tuple<int, int, char>> edges(N);
        for (int i = 0; i < N; ++i) cin >> get<0>(edges[i]) >> get<1>(edges[i]) >> get<2>(edges[i]);
        levelOrderTraversal(N, edges);
    }
    return 0;
}
